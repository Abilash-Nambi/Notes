javascript
--------------------------

.Global execution context;
.window object || global object 
.this concept
.Lexical environment
.Hoisting
.tdz
.Shadowing
.illegal shadowing
.block scope,global scope,funciton scope
.closure
.currying
.First-class fucntion
.array methods
.string methods
.map,filter,reduce,forEach
.ternary operator
.nullish collish
.spread operator
.rest operator
.shallow copy
.deep copy
.weekset 
.weekMap
.Set
.Map
.difference between the Set and weakSet.
.difference between the Map and weekMap
.Diff between object and map
.differences between null and undefined
.Factory function
.throttling
.debouncing
.trikkling
.defer
.Function composition
.Literals
.Use strict
.Event bubbling
.Event propagation
.Generetor function
.arrow function vs regular functions
.pure funciton
.settimeout vs setinterval 
.Continue
.Do while
.Finally
.default parameters
.WebAPIs
.escape sequence
.Bitwise operator
.Throw statement
.Class object constructor
.Extends keyword
.Switch case syntax
.Primitive vs Non primitive
.mutable vs immutable
.passBy referece vs passBy value
.keyword
.identifier
.optional chaining
.Type casting
.Higher order functions
.Call,apply,bind
.json.stringify and json.parse()
.callstack
.asynchronous tasks that should occur in an event loop
.input arguments for an asynchronous queue
.eventLoop
.Single Threaded vs multi threaded
.Synchronous vs Asynchronous
.blocking vs unblocking
.callback
.Promises
.methods of promise
.promises states
.promise.all,promise.any,promise.race
.promisify
.promise chaining
.memoization
.IIFE
.control flow function
.object.freeze object.searl()
.async defer

NOde js--------------------------------------------------------------------

.what is node js?
.MVC
.repl
.npm 
.API
.render
.res.send() vs res.render()
.server side rendering
.res.end()
.res.write()
.res.writeHead()
.set head
.server.listen
.Streams
.types of streams available in Node.js
.piping
.difference between readFile and create Read Stream in Node.js
.BUFFER
.Modules
.MORGON
.middleware,types of middleware
.express.json(),express.urlencoded(),express.Router()
.body-parser
.app.use
.app.all
.app.set
.http vs https
.express.session
.express.cookieParser
.express session vs session storage
.Http methods
.package.json()
.Query parameters  
.params
.view engine
.cors
.OPTIONS
.Preflight      
.PM2 -r
.session-storage
.localStorage
.cookie
.expires vs maxAge
.Dynamic rendering vs conditional rendering
.dependencies vs devdependencies
.env
.trace 
.error middleware
.controll flow functions
.dynamic routing
.router chaining
.disadvantages to using Node.js
.primary reason for using the event-based model in Node.js
.difference between Node.js and Ajax
.Can you access DOM in Node
."non-blocking" in node.js
.overcome the problem of blocking I/O operations
.concept of stub in Node.js
.Dependencies vs Dev dependencies
.Global objects
.Timer functions
.Status Codes
.assert used in Node.js 
.handle the child threads
.Event Emitter in Node.js
.Clustering
.measure the duration of async operations
.measure the performance of async operations
.Libuv
.express async handler
.Threadpool
.Node concurrentcy
.Child process
.differences between process.nextTick(), setImmediate(), and setTimeout()
.Explain the spawn, fork, and exec methods
.Rest apis
.Rest principles/constraints
.content negotiation
.Accept
.api versioning
.import and require

Mongo Db--------------------------------------------------------------------

● what is mongoDb?
● Where is Mongo DB used?
● Difference bw relation and non relation database
● Collection
● document
● BSON (Binary json)
● JSON
● Comparison Operators - 
● Logical Operators 
● UPSERT
● Array update Operators - 
● EXISTS
● $ELEMMATCH   
● Field Filters
● $regex -
● Agregation
● OUt stage
● Unwind
● aggregation pipeline
● AllowDiskuse
● Accumilators
● Unary operators
● Lookup -
● MongoDB utilities
● indexes 
● Types of indexing
● Distinct
● Capped collection - 
● cap theorm
● Replication 
● Replic set-
● Normalisation
● DEnormalisation
● Sharding
● Scaling
● Vertical Scaling
● horizontal Scaling 
● GridFs
● NameSpace
● Transaction
● Acid properties
● cursor
● multi draw
● auto scaling
● concurrency
● bulk write
● batch sizing
● shard key
● query routes
● update vs replace
● in
● all
● type
● views
● Geospatial index
● $ne $nin $in $not
● $project
● Atomic operation
● $addToSet
● method binding(check)
●
●
●


●InsertOne()
●insertMany()
●insert()
●update - upsert
●db.users.updateOne({name:"Justin Thomas"},{$set:{place:"kannur",age:13}},{upsert:true})
●update - multi
●update 
●updateOne
●updteMany
●sort
●count or countDocuments
●db.users.countDocuments({place:"kannur"})
●drop (collection) ---------To drop the collection
●remove({})  ---------remove all documents
●remove({name:"jitin"})
●db.users.find({},{name:1,place:1,_id:0}) ---field filtering
●db.student.remove({age:{$eq:18}}, true)  delete only one
●db.student.deleteOne({age:17})
●deleteOne() first will delete
●db.student.distinct("name")
●db.gfg.find().limit(2)
●db.gfg.find().skip(1)
●$exists
●$elemMatch
●db.contributor.find({name: {$in: ["Amit", "Suman"]}}).pretty() 
●Badge> db.users.find({$and:[{"place":"kannur"},{age:{$gte:20}}]})
●db.contributor.find({salary: {$not: {$gt: 2000}}}).pretty() 
●db.contributor.find({$nor: [{salary: 3000}, {branch: "ECE"}]}).pretty() 
●db.contributor.update({name: "Mohit"},{$inc: {publisharticles: 10, salary: -100}}) 

●db.contributor.update({name: "Rohit"}, {$push: {language: "C++"}})
●db.contributor.update({name: "Rohit"}, {$pop: { language: -1}}) removing first
●db.contributor.update({name: "Rohit"}, {$pop: { language: 1}})  removing last
●db.contributor.update({}, 
... {$pull: {language: {$in: ["C#", "Perl"]}}}, 
... {multi: true}) 
●db.contributor.update({name: "Rohit"}, 
					{$pullAll: {language: ["Java", "C#", "Python"]}})

●IN and All

● db.users.aggregate([{$group:{_id:"$place"}}])
● db.users.aggregate([{$match:{category:"Human"}},{$group:{"place":"kannur"}}])
● db.users.aggregate([{$project:{name:1,place:1,_id:0}}])
● db.users.aggregate([{$group:{_id:"$place",count:{$sum:1}}}])
● db.users.aggregate([{$match:{place:"kannur",total:{$sum:"$age"}}}])
● db.person.find({name: {$regex:/rel/i}})  where ever the rel present in the name it will show.
● $regex - db.person.find({name: {$regex:/^rel/i}}) if name starts with rel then that document shows.
● $regex - db.person.find({name: {$regex:/rel$/i}}) if name ends with rel then that document shows.



REact------------------------------------------------------------------------------


● Virtual dom , Dom
● createRoot(),render().
● strict mode
● JSX
● diffing
● reconcilation
● React Components. Types of components
● Props
● Render Props
● parent child relationship
● difference between state and variable
● pure component
● ● ●  Higher order components
● Props drilling
● React Conditional Rendering
● React Lists
● React Router
● ● ● React Memo
● React Hooks
● state
● useState
● useEffect
● react life cycle  
● ● ● useContext
● ● ● useRef
● ● ● useReducer
● ● ● useCallback
● ● ●  useMemo 
● REact memo vs useMemo
● ● ●  Custom Hooks
● ● ●  context vs Redux
● side effect working
● state vs props 
● shadow Dom
● react fibre
● counter application
● cleanup function
● limitation of react (initial Load ,seo)
● object empty
● array duplicate
● dynamic import
● fragment
● webAPI
● controlled components
● uncontrolled components
● type of events
● native events
● synthetic events
● event pooling
● error boundries
● class component
● React.Profiler
● JSX provide security
● Webpack code splitting
● REST api
● Immutable data in redux
● Redux immutablity
● Redux persistentce
● jwt
● Pricniples of redux
● Prop types
● react latest features 
● concurrent mode
● webpack
● axios cancel token
● fetch vs axios
● 














